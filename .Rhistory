final.pick.switch <- change_door( stay=F, opened.door, first.pick )
outcome.stay <- determine_winner( final.pick.stay, new.game  )
outcome.switch <- determine_winner( final.pick.switch, new.game )
strategy <- c("stay","switch")
outcome <- c(outcome.stay,outcome.switch)
game.results <- data.frame( strategy, outcome,
stringsAsFactors=F )
return( game.results )
}
#' @title
#'   Lets Play x 100
#' @description
#'   Plays the game a hundred times
#' @details
#'   PLays a hundred time and shows your results after those hundred and it determine
#'   what had the better winning percentage: staying or winning
#' @param ...
#'    n=100
#' @return
#'    return( results.df )
#' @examples
#'    play_n_games()
#' @export
play_n_games <- function( n=100 )
{
library( dplyr )
results.list <- list()   # collector
loop.count <- 1
for( i in 1:n )  # iterator
{
game.outcome <- play_game()
results.list[[ loop.count ]] <- game.outcome
loop.count <- loop.count + 1
}
results.df <- dplyr::bind_rows( results.list )
table( results.df ) %>%
prop.table( margin=1 ) %>%  # row proportions
round( 2 ) %>%
print()
return( results.df )
}
setwd( "montyhall" )
devtools::document()
devtools::document()
devtools::install( "montyhall" )
setwd( "Doanloads" )
setwd( "Downloads" )
setwd( "Download" )
setwd( "C:\Users\mango\Downloads\" )
setwd( "Users\mango\Downloads\" )
devtools::install( "montyhall" )
devtools::install_github( "JayCastro/montyhall", force = T )
library( montyhall )
create_game()
create_game()
library( "montyhall")
create_game()
remove.packages("montyhall", lib="~/R/win-library/3.6")
devtools::install_github( "JayCastro/montyhall", force = T )
library( "montyhall")
create_game()
help("create_game")
#' @title
#'   Create a new Monty Hall Problem game.
#'
#' @description
#'   `create_game()` generates a new game that consists of two doors
#'   with goats behind them, and one with a car.
#'
#' @details
#'   The game setup replicates the game on the TV show "Let's
#'   Make a Deal" where there are three doors for a contestant
#'   to choose from, one of which has a car behind it and two
#'   have goats. The contestant selects a door, then the host
#'   opens a door to reveal a goat, and then the contestant is
#'   given an opportunity to stay with their original selection
#'   or switch to the other unopened door. There was a famous
#'   debate about whether it was optimal to stay or switch when
#'   given the option to switch, so this simulation was created
#'   to test both strategies.
#'
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   create_game()
#'
#' @export
create_game <- function()
{
a.game <- sample( x=c("goat","goat","car"), size=3, replace=F )
return( a.game )
}
#' @title
#'    Door Selection
#' @description
#'    `select_door` generates a randome door that will be your inital selection
#' @details
#'       Doors that are selected are from 1-3 and are picked at random and that will be your inital pick
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   select_door()
#' @export
select_door <- function( )
{
doors <- c(1,2,3)
a.pick <- sample( doors, size=1 )
return( a.pick )  # number between 1 and 3
}
#' @title
#'    Open Goat Door
#' @description
#'    `open_goat_door`generates a goat door that is not behind your inital pick.
#' @details
#'     This opens a goat door but it will be a goat door not already seected and it will never open the car door.
#' @param ... game, a.pick
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   open_goat_door()
#' @export
open_goat_door <- function( game, a.pick )
{
doors <- c(1,2,3)
# if contestant selected car,
# randomly select one of two goats
if( game[ a.pick ] == "car" )
{
goat.doors <- doors[ game != "car" ]
opened.door <- sample( goat.doors, size=1 )
}
if( game[ a.pick ] == "goat" )
{
opened.door <- doors[ game != "car" & doors != a.pick ]
}
return( opened.door ) # number between 1 and 3
}
#' @title
#'  Change Door
#' @description
#'  `change_door` switches your inital door
#' @details
#'    This function switches your door to the sny of the random doors not already
#'    selected or the opened goat door
#' @param ...
#'    stay=T, opened.door, a.pick
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   change_door()
#' @export
change_door <- function( stay=T, opened.door, a.pick )
{
doors <- c(1,2,3)
if( stay )
{
final.pick <- a.pick
}
if( ! stay )
{
final.pick <- doors[ doors != opened.door & doors != a.pick ]
}
return( final.pick )  # number between 1 and 3
}
#' @title
#'    Did I Win?
#' @description
#'   This function determines if you win or not
#' @details
#'  This function will return a WIN or LOSE depending on the outcome
#' @param ...
#'    final.pick, game
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   determine_winner()
#' @export
determine_winner <- function( final.pick, game )
{
if( game[ final.pick ] == "car" )
{
return( "WIN" )
}
if( game[ final.pick ] == "goat" )
{
return( "LOSE" )
}
}
#' @title
#' Lets Win a Car!
#' @description
#, This function plays the game and gives you the results
#' @details
#'  Tells you if won by staing or if you won by switching . The victory is the car
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   play_game()
#' @export
play_game <- function( )
{
new.game <- create_game()
first.pick <- select_door()
opened.door <- open_goat_door( new.game, first.pick )
final.pick.stay <- change_door( stay=T, opened.door, first.pick )
final.pick.switch <- change_door( stay=F, opened.door, first.pick )
outcome.stay <- determine_winner( final.pick.stay, new.game  )
outcome.switch <- determine_winner( final.pick.switch, new.game )
strategy <- c("stay","switch")
outcome <- c(outcome.stay,outcome.switch)
game.results <- data.frame( strategy, outcome,
stringsAsFactors=F )
return( game.results )
}
#' @title
#'   Lets Play x 100
#' @description
#'   Plays the game a hundred times
#' @details
#'   PLays a hundred time and shows your results after those hundred and it determine
#'   what had the better winning percentage: staying or winning
#' @param ...
#'    n=100
#' @return
#'    return( results.df )
#' @examples
#'    play_n_games()
#' @export
play_n_games <- function( n=100 )
{
library( dplyr )
results.list <- list()   # collector
loop.count <- 1
for( i in 1:n )  # iterator
{
game.outcome <- play_game()
results.list[[ loop.count ]] <- game.outcome
loop.count <- loop.count + 1
}
results.df <- dplyr::bind_rows( results.list )
table( results.df ) %>%
prop.table( margin=1 ) %>%  # row proportions
round( 2 ) %>%
print()
return( results.df )
}
setwd( "montyhalls" )
setwd( "montyhall" )
setwd( "montyhalls" )
devtools::document()
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
library(knitr)
library(pander)
has_devel()
#' @title
#'   Create a new Monty Hall Problem game.
#'
#' @description
#'   `create_game()` generates a new game that consists of two doors
#'   with goats behind them, and one with a car.
#'
#' @details
#'   The game setup replicates the game on the TV show "Let's
#'   Make a Deal" where there are three doors for a contestant
#'   to choose from, one of which has a car behind it and two
#'   have goats. The contestant selects a door, then the host
#'   opens a door to reveal a goat, and then the contestant is
#'   given an opportunity to stay with their original selection
#'   or switch to the other unopened door. There was a famous
#'   debate about whether it was optimal to stay or switch when
#'   given the option to switch, so this simulation was created
#'   to test both strategies.
#'
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   create_game()
#'
#' @export
create_game <- function()
{
a.game <- sample( x=c("goat","goat","car"), size=3, replace=F )
return( a.game )
}
#' @title
#'    Door Selection
#' @description
#'    `select_door` generates a randome door that will be your inital selection
#' @details
#'       Doors that are selected are from 1-3 and are picked at random and that will be your inital pick
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   select_door()
#' @export
select_door <- function( )
{
doors <- c(1,2,3)
a.pick <- sample( doors, size=1 )
return( a.pick )  # number between 1 and 3
}
#' @title
#'    Open Goat Door
#' @description
#'    `open_goat_door`generates a goat door that is not behind your inital pick.
#' @details
#'     This opens a goat door but it will be a goat door not already seected and it will never open the car door.
#' @param ... game, a.pick
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   open_goat_door()
#' @export
open_goat_door <- function( game, a.pick )
{
doors <- c(1,2,3)
# if contestant selected car,
# randomly select one of two goats
if( game[ a.pick ] == "car" )
{
goat.doors <- doors[ game != "car" ]
opened.door <- sample( goat.doors, size=1 )
}
if( game[ a.pick ] == "goat" )
{
opened.door <- doors[ game != "car" & doors != a.pick ]
}
return( opened.door ) # number between 1 and 3
}
#' @title
#'  Change Door
#' @description
#'  `change_door` switches your inital door
#' @details
#'    This function switches your door to the sny of the random doors not already
#'    selected or the opened goat door
#' @param ...
#'    stay=T, opened.door, a.pick
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   change_door()
#' @export
change_door <- function( stay=T, opened.door, a.pick )
{
doors <- c(1,2,3)
if( stay )
{
final.pick <- a.pick
}
if( ! stay )
{
final.pick <- doors[ doors != opened.door & doors != a.pick ]
}
return( final.pick )  # number between 1 and 3
}
#' @title
#'    Did I Win?
#' @description
#'   This function determines if you win or not
#' @details
#'  This function will return a WIN or LOSE depending on the outcome
#' @param ...
#'    final.pick, game
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   determine_winner()
#' @export
determine_winner <- function( final.pick, game )
{
if( game[ final.pick ] == "car" )
{
return( "WIN" )
}
if( game[ final.pick ] == "goat" )
{
return( "LOSE" )
}
}
#' @title
#' Lets Win a Car!
#' @description
#, This function plays the game and gives you the results
#' @details
#'  Tells you if won by staing or if you won by switching . The victory is the car
#' @param ... no arguments are used by the function.
#'
#' @return The function returns a length 3 character vector
#'   indicating the positions of goats and the car.
#'
#' @examples
#'   play_game()
#' @export
play_game <- function( )
{
new.game <- create_game()
first.pick <- select_door()
opened.door <- open_goat_door( new.game, first.pick )
final.pick.stay <- change_door( stay=T, opened.door, first.pick )
final.pick.switch <- change_door( stay=F, opened.door, first.pick )
outcome.stay <- determine_winner( final.pick.stay, new.game  )
outcome.switch <- determine_winner( final.pick.switch, new.game )
strategy <- c("stay","switch")
outcome <- c(outcome.stay,outcome.switch)
game.results <- data.frame( strategy, outcome,
stringsAsFactors=F )
return( game.results )
}
#' @title
#'   Lets Play x 100
#' @description
#'   Plays the game a hundred times
#' @details
#'   PLays a hundred time and shows your results after those hundred and it determine
#'   what had the better winning percentage: staying or winning
#' @param ...
#'    n=100
#' @return
#'    return( results.df )
#' @examples
#'    play_n_games()
#' @export
play_n_games <- function( n=100 )
{
library( dplyr )
results.list <- list()   # collector
loop.count <- 1
for( i in 1:n )  # iterator
{
game.outcome <- play_game()
results.list[[ loop.count ]] <- game.outcome
loop.count <- loop.count + 1
}
results.df <- dplyr::bind_rows( results.list )
table( results.df ) %>%
prop.table( margin=1 ) %>%  # row proportions
round( 2 ) %>%
print()
return( results.df )
}
devtools::document()
setwd( "montyhall" )
currwd
currwd()
getwd()
setwd("C:/Users/mango/PC/Downloads/montyhall/")
setwd("C:/Users/mango/PC/Downloads/montyhalls/")
setwd("C:/Users/mango/PC/Downloads/montyhalls/")
devtools::document()
setwd("C:/Users/mango/PC/Downloads/montyhalls/")
setwd("C:/Users/mango/Downloads/montyhall/")
devtools::document()
devtools::document()
?
#' @title
#'   Lets Play x 100
#' @description
#'   Plays the game a hundred times
#' @details
#'   PLays a hundred time and shows your results after those hundred and it determine
#'   what had the better winning percentage: staying or winning
#' @param ...
#'    n=100
#' @return
#'    return( results.df )
#' @examples
#'    play_n_games()
#' @export
play_n_games <- function( n=100 )
?
?
devtools::document()?
?
devtools::document()?
?
?devtools::document()
?"devtools::document()"
remove.packages("montyhall", lib="~/R/win-library/3.6")
devtools::install_github( "JayCastro/montyhall" )
library(montyhall)
create_game
create_game()
library(montyhall)
create_game()
create_game()
